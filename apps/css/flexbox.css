h1{
    text-align: center;
    /* membuat tulisan rata tengah */
}
.container{
    background-color: #003049;
    width: 90%;
    /* height: 500px; */
    margin: 0 auto;
    /* ini dibuat supaya dia brada di tengah */
    border: 5px solid #003049;
    display: flex ;
    flex-direction: row;
    /* maka tidak akan ada perubahan karena scara default nya row */
    
    /* flex-direction: row-reverse; */
    /* nah dngn ini ia akan memulai dari arah sbaliknya */

    /* flex-direction: column-reverse; */
    /* ini akan membuat dia berarah menjadi sbuah kolom(atas ke bawah) serta secara tidak sengaja
    dia akan bertampilan sperti block, tetapi lebar nya tidak akan melebihi container pembungkusnya
    krena dia tidak berukuran asli, soalnya kita hanya menaruh lebar container 500px, dan itu membuat
    dia diatur scara otomatis lebarnya agar menyesuaikan container ketika kita menggunakan display ber
    value flex.
    
    NAH GIMANA KALAU KITA MEMBUAT CONTAINER LEBARNYA 1200 atau ketika kalian menjumlah total
    dari smua div yang kita punya itu akan cukup sesuai aslinya, contoh disini div atau kotak kita
    berukuran 200px dimana ada 5 div berarti kita harus memiliki stidak nya container berukuran 1000px
    jika ingin menggunakan ukuran div aseline. dimana disini kita contohkan dngn menggunakan container
    berukuran 1200px (sudah berlebih) bisa terlihat disini kita masih punya space kosong berukuran 200px*/

    /* justify-content: flex-start; */
    /* tampilanya gdk yg berubah krena ini nilai default */

    /* justify-content: flex-end; */
    /* nah jika kalian perhatikan angka satu dua tiga, atau kotak dimulai dari kanan tapi posisi nya
    seperti saat kita menggunakan flex direction row-reverse */

    justify-content: center;
    /* hasilnya akan di tengah */

    /* justify-content: space-between; */
    /* jadi ada jarak di masing2 kontenya, atau antar elemen dia memiliki jarak */

    /* justify-content: space-around; */
    /* jarak antar konten ini lebih besar dari pada jarak antar batas dari si kontainer */

    /* justify-content: space-evenly; */
    /* jarak antar konten elemen dan batas container dibagi rata */

    /* flex-wrap: wrap; */
    /* atribut flex wrap dngn value wrap ini akan membuat kita mempertahankan ukuran asli dari div atau
    element yang kita bungkus dan akan mencarikan tempat yang bisa digunakan untuk menampung elemen
    div lainya didalam container tersebut, jadi dngn ini yang tadinya kalau kita ingin mempertahankan ukuran
    kita harus memperbesar luas dari pembungkus, maka ini bisa kita gunakan tetapi krena dia mencari 
    lokasi kosong yang ada di container maka div div lain akan bergeser ke lokasi kosong tersebut */

    /* flex-wrap: wrap-reverse; */
    /* seperti namanya reeverse, dia akan mengubah urutan elemen nya nomor satu akan mulai dari kanan
    
    NAH KALAU KITA MEMAKAI FLEX DIRECTION NYA ROW, maka urutan elemen akan dimulai dari bawah tetapi
    kalau memakai WRAP biasa dia akan mulai dari atas*/

    /* KITA AKAN BELAJAR PENERAPAN ALIGN ITEM 
    1.FLEX-START*/
    /* align-items: flex-start; */
    /* ini tidak akan berubah apa apa, tpi untuk membuktikan fungsinya, coba kita ubah dulu ukuran
    dari setiap div(kotak) scara manual atau satu persatu, nah dngn begini akan kliatan perubahan nya
    FLEX-START smua akan rata dimulai dari atas 
    
    2.Center */
    align-items: center;
    /* maka smua akan dimulai dari tengah 
    
    3.Flex-end*/
    /* align-items: flex-end; */
    /* maka smua akan dimulai dari bawah 
    
    FYI: ALIGN ITEM BISA DIKOMBINASIKAN DNGN JUSTIFY-CONTENT, CONTOH disini align item value nya flex
    end, dan justify content kita juga bervalue sama. maka yg terjadi ialah div tadi di mulai dari bawah
    dan mulai nya dari kanan dan posisinya terbalik sperti kita menggunakan flex-direction bervalue 
    row-reverse
    
    4.Baseline*/
    /* align-items: baseline; */

    /* KITA AKAN MEMPELAJARI TENTANG ALIGN CONTENT */
    /* align-content: space-between; */
    
}
.container div{
    height: 200px;
    width: 200px;
    /* temen temen bisa memperhatikan div ini akan melewati batas container krena container hanya
    memiliki tinggi 500px sdngkan masing masing div nya bernilai 200px, so otomatis pada div ke 3 dia
    sudah melewati container
    
    NAH DISINI KITA AKAN MENERAPKAN FLEX*/
    
    /* Nah skrg gimana kalau kita tambahkan flex basis */
    flex-basis: 400px;
    /* nah bisa diliat masing div atau elemen nya akan brubah 500px, krena direction nya row
    maka yang diubah adalah width nya, kalau direction nya column maka yang diubah ialah height nya */
}

/* KITA AKAN BELAJAR MEMAKAI ALIGN-SELF
sperti namanya ini digunakan ketika kita ingin mengubah suatu hal scara spesifik */

/* .alself:hover{
    align-self: center;
} */
div:nth-of-type(1){
    /* align-self: flex-start; */

    /* contoh disini kita akan memasukan elemen flex-grow */
    /* flex-grow: 1; */
    /* nah jadi sisa jarak baik itu kanan dan kiri yang blum dipakai kita akan mengimplementasikan ke
    dalam bagian kosong */

    flex-shrink: 2;
    /* ukurna nya akan mengecil terlebih dahulu kalau misalkan container nya lebih kecil ketimbang isi nya
    maka akan mengecil terlebih dahulu di elemen yang kita berikan 
    ini keterbalikan dari grow*/
}
div:nth-of-type(3){
    /* align-self: self-end; */

    /* flex-grow: 5; */

    flex-shrink: 2;
}
/* div:nth-of-type(4){
    align-self: center;
}
div:nth-of-type(5){
    align-self: center;
} */

main{
    width: 80%;
    margin: 0 auto;
    border: 5px solid black;
    height: 500px;
    display: flex;
}

main .sidebar{
background-color: #003049;
flex: 1 2 300px;
}
main .content{
    background-color: yellow;
    flex: 2 1 800px;
}

/* INI ADALAH MEMBUAT SINTAKS FLEX SECARA RINGKAS 
/* Keyword value */
/* flex: none; 0 0 auto */

/* One value, unitless number: flex-grow
flex-basis is then equal to 0. */
/* flex: 2; 2 1 0 */

/* One value, width/height: flex-basis */
/* flex: auto; 1 1 auto */
/* flex: 10em; 1 1 10em */
/* flex: 30%; */
/* flex: min-content; */

/* Two values: flex-grow | flex-basis */
/* flex: 1 30px; 1 1 30px */

/* Two values: flex-grow | flex-shrink */
/* flex: 2 2; 2 2 0 */

/* Three values: flex-grow | flex-shrink | flex-basis */
/* flex: 2 2 10%; */

/* Global values */
/* flex: inherit; */
/* flex: initial; 0 1 auto */
/* flex: revert;
flex: revert-layer;
flex: unset; */
